(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var _objectAssign = require('./_objectAssign');

module.exports =
  typeof Object.assign === 'function' ? Object.assign : _objectAssign;

},{"./_objectAssign":6}],2:[function(require,module,exports){
var _isPlaceholder = require('./_isPlaceholder');


/**
 * Optimized internal one-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */
module.exports = function _curry1(fn) {
  return function f1(a) {
    if (arguments.length === 0 || _isPlaceholder(a)) {
      return f1;
    } else {
      return fn.apply(this, arguments);
    }
  };
};

},{"./_isPlaceholder":5}],3:[function(require,module,exports){
var _curry1 = require('./_curry1');
var _isPlaceholder = require('./_isPlaceholder');


/**
 * Optimized internal two-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */
module.exports = function _curry2(fn) {
  return function f2(a, b) {
    switch (arguments.length) {
      case 0:
        return f2;
      case 1:
        return _isPlaceholder(a) ? f2
             : _curry1(function(_b) { return fn(a, _b); });
      default:
        return _isPlaceholder(a) && _isPlaceholder(b) ? f2
             : _isPlaceholder(a) ? _curry1(function(_a) { return fn(_a, b); })
             : _isPlaceholder(b) ? _curry1(function(_b) { return fn(a, _b); })
             : fn(a, b);
    }
  };
};

},{"./_curry1":2,"./_isPlaceholder":5}],4:[function(require,module,exports){
module.exports = function _has(prop, obj) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
};

},{}],5:[function(require,module,exports){
module.exports = function _isPlaceholder(a) {
  return a != null &&
         typeof a === 'object' &&
         a['@@functional/placeholder'] === true;
};

},{}],6:[function(require,module,exports){
var _has = require('./_has');

// Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
module.exports = function _objectAssign(target) {
  if (target == null) {
    throw new TypeError('Cannot convert undefined or null to object');
  }

  var output = Object(target);
  var idx = 1;
  var length = arguments.length;
  while (idx < length) {
    var source = arguments[idx];
    if (source != null) {
      for (var nextKey in source) {
        if (_has(nextKey, source)) {
          output[nextKey] = source[nextKey];
        }
      }
    }
    idx += 1;
  }
  return output;
};

},{"./_has":4}],7:[function(require,module,exports){
var _assign = require('./internal/_assign');
var _curry2 = require('./internal/_curry2');


/**
 * Create a new object with the own properties of the first object merged with
 * the own properties of the second object. If a key exists in both objects,
 * the value from the second object will be used.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {k: v} -> {k: v} -> {k: v}
 * @param {Object} l
 * @param {Object} r
 * @return {Object}
 * @see R.mergeWith, R.mergeWithKey
 * @example
 *
 *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });
 *      //=> { 'name': 'fred', 'age': 40 }
 *
 *      var resetToDefault = R.merge(R.__, {x: 0});
 *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}
 */
module.exports = _curry2(function merge(l, r) {
  return _assign({}, l, r);
});

},{"./internal/_assign":1,"./internal/_curry2":3}],8:[function(require,module,exports){
var _curry2 = require('./internal/_curry2');


/**
 * Returns a partial copy of an object containing only the keys specified. If
 * the key does not exist, the property is ignored.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig [k] -> {k: v} -> {k: v}
 * @param {Array} names an array of String property names to copy onto a new object
 * @param {Object} obj The object to copy from
 * @return {Object} A new object with only properties from `names` on it.
 * @see R.omit, R.props
 * @example
 *
 *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
 *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}
 */
module.exports = _curry2(function pick(names, obj) {
  var result = {};
  var idx = 0;
  while (idx < names.length) {
    if (names[idx] in obj) {
      result[names[idx]] = obj[names[idx]];
    }
    idx += 1;
  }
  return result;
});

},{"./internal/_curry2":3}],9:[function(require,module,exports){
/*! https://mths.be/includes v0.2.0 by @mathias */
if (!String.prototype.includes) {
	(function() {
		'use strict'; // needed to support `apply`/`call` with `undefined`/`null`
		var toString = {}.toString;
		var defineProperty = (function() {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			try {
				var object = {};
				var $defineProperty = Object.defineProperty;
				var result = $defineProperty(object, object, object) && $defineProperty;
			} catch(error) {}
			return result;
		}());
		var indexOf = ''.indexOf;
		var includes = function(search) {
			if (this == null) {
				throw TypeError();
			}
			var string = String(this);
			if (search && toString.call(search) == '[object RegExp]') {
				throw TypeError();
			}
			var stringLength = string.length;
			var searchString = String(search);
			var searchLength = searchString.length;
			var position = arguments.length > 1 ? arguments[1] : undefined;
			// `ToInteger`
			var pos = position ? Number(position) : 0;
			if (pos != pos) { // better `isNaN`
				pos = 0;
			}
			var start = Math.min(Math.max(pos, 0), stringLength);
			// Avoid the `indexOf` call if no match is possible
			if (searchLength + start > stringLength) {
				return false;
			}
			return indexOf.call(string, searchString, pos) != -1;
		};
		if (defineProperty) {
			defineProperty(String.prototype, 'includes', {
				'value': includes,
				'configurable': true,
				'writable': true
			});
		} else {
			String.prototype.includes = includes;
		}
	}());
}

},{}],10:[function(require,module,exports){
/*! http://mths.be/repeat v0.2.0 by @mathias */
if (!String.prototype.repeat) {
	(function() {
		'use strict'; // needed to support `apply`/`call` with `undefined`/`null`
		var defineProperty = (function() {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			try {
				var object = {};
				var $defineProperty = Object.defineProperty;
				var result = $defineProperty(object, object, object) && $defineProperty;
			} catch(error) {}
			return result;
		}());
		var repeat = function(count) {
			if (this == null) {
				throw TypeError();
			}
			var string = String(this);
			// `ToInteger`
			var n = count ? Number(count) : 0;
			if (n != n) { // better `isNaN`
				n = 0;
			}
			// Account for out-of-bounds indices
			if (n < 0 || n == Infinity) {
				throw RangeError();
			}
			var result = '';
			while (n) {
				if (n % 2 == 1) {
					result += string;
				}
				if (n > 1) {
					string += string;
				}
				n >>= 1;
			}
			return result;
		};
		if (defineProperty) {
			defineProperty(String.prototype, 'repeat', {
				'value': repeat,
				'configurable': true,
				'writable': true
			});
		} else {
			String.prototype.repeat = repeat;
		}
	}());
}

},{}],11:[function(require,module,exports){
/*! http://mths.be/startswith v0.2.0 by @mathias */
if (!String.prototype.startsWith) {
	(function() {
		'use strict'; // needed to support `apply`/`call` with `undefined`/`null`
		var defineProperty = (function() {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			try {
				var object = {};
				var $defineProperty = Object.defineProperty;
				var result = $defineProperty(object, object, object) && $defineProperty;
			} catch(error) {}
			return result;
		}());
		var toString = {}.toString;
		var startsWith = function(search) {
			if (this == null) {
				throw TypeError();
			}
			var string = String(this);
			if (search && toString.call(search) == '[object RegExp]') {
				throw TypeError();
			}
			var stringLength = string.length;
			var searchString = String(search);
			var searchLength = searchString.length;
			var position = arguments.length > 1 ? arguments[1] : undefined;
			// `ToInteger`
			var pos = position ? Number(position) : 0;
			if (pos != pos) { // better `isNaN`
				pos = 0;
			}
			var start = Math.min(Math.max(pos, 0), stringLength);
			// Avoid the `indexOf` call if no match is possible
			if (searchLength + start > stringLength) {
				return false;
			}
			var index = -1;
			while (++index < searchLength) {
				if (string.charCodeAt(start + index) != searchString.charCodeAt(index)) {
					return false;
				}
			}
			return true;
		};
		if (defineProperty) {
			defineProperty(String.prototype, 'startsWith', {
				'value': startsWith,
				'configurable': true,
				'writable': true
			});
		} else {
			String.prototype.startsWith = startsWith;
		}
	}());
}

},{}],12:[function(require,module,exports){
window.bashEmulator = require('./index')

},{"./index":19}],13:[function(require,module,exports){
function cat (env, args) {
  var exitCode = 0
  Promise.all(args.map(function (path) {
    return env.system.read(path).then(null, function (err) {
      exitCode = 1
      return 'cat: ' + err
    })
  })).then(function (contents) {
    env.output(contents.join('\n'))
    env.exit(exitCode)
  })
}

module.exports = cat

},{}],14:[function(require,module,exports){
function cd (env, args) {
  var path = args[0] || '/home/' + env.system.state.user

  env.system.changeDir(path).then(
    env.exit,
    function (errorMessage) {
      env.error(errorMessage)
      env.exit(1)
    }
  )
}

module.exports = cd


},{}],15:[function(require,module,exports){
require('string.prototype.repeat')

function history (env) {
  env.system.getHistory().then(function (history) {
    var hChars = history.length.toString().length
    env.output(history.map(function (item, i) {
      var num = i + 1
      var numChars = num.toString().length
      var space = ' '.repeat(hChars - numChars)
      return space + num + ' ' + item
    }).join('\n'))
    env.exit()
  })
}

module.exports = history


},{"string.prototype.repeat":10}],16:[function(require,module,exports){
var commands = {
  ls: require('./ls'),
  pwd: require('./pwd'),
  cd: require('./cd'),
  history: require('./history'),
  cat: require('./cat')
}

module.exports = commands

},{"./cat":13,"./cd":14,"./history":15,"./ls":17,"./pwd":18}],17:[function(require,module,exports){
require('string.prototype.startswith')
require('string.prototype.includes')

// NOTE: No support for files yet
function ls (env, args) {
  var task
  if (!args.length) {
    task = env.system.getDir()
      .then(env.system.readDir)
      .then(function (listing) {
        return listing.join(' ')
      })
  } else if (args.length === 1) {
    task = env.system.readDir(args[0]).then(function (listing) {
      return listing.join(' ')
    })
  } else {
    task = Promise.all(args.sort().map(function (path) {
      return env.system.readDir(path).then(function (listing) {
        return path + ':\n' + listing.join(' ')
      })
    })).then(function (listings) {
      return listings.join('\n\n')
    })
  }
  task.then(function (result) {
    env.output(result)
    env.exit()
  }, function (err) {
    env.output('ls: ' + err)
    env.exit(2)
  })
}

module.exports = ls

},{"string.prototype.includes":9,"string.prototype.startswith":11}],18:[function(require,module,exports){
function pwd (env, args) {
  env.system.getDir().then(function (dir) {
    env.output(dir)
    env.exit()
  })
}

module.exports = pwd


},{}],19:[function(require,module,exports){
var pick = require('ramda/src/pick')
var merge = require('ramda/src/merge')
var commands = require('./commands')

function bashEmulator (initialState) {
  var state = createState(initialState)
  function getPath (path) {
    return joinPaths(state.workingDirectory, path)
  }

  var emulator = {
    commands: commands,

    state: state,

    run: function (input) {
      var args = input.split(' ')
      var cmd = args.shift()
      state.history.push(input)
      if (!commands[cmd]) {
        return Promise.reject(cmd + ': command not found')
      }
      var result = ''
      return new Promise(function (resolve, reject) {
        commands[cmd]({
          output: function (str) {
            result += str
          },
          // NOTE: For now we just redirect stderr to stdout
          error: function (str) {
            result += str
          },
          // NOTE: For now we don't use specific error codes
          exit: function (code) {
            if (code) {
              reject(result)
            } else {
              resolve(result)
            }
          },
          system: emulator
        }, args)
      })
    },

    getDir: function () {
      return Promise.resolve(state.workingDirectory)
    },

    changeDir: function (target) {
      var normalizedPath = getPath(target)
      if (!state.fileSystem[normalizedPath]) {
        return Promise.reject(normalizedPath + ': No such file or directory')
      }
      state.workingDirectory = normalizedPath
      return Promise.resolve()
    },

    read: function (arg) {
      var filePath = getPath(arg)
      if (!state.fileSystem[filePath]) {
        return Promise.reject(arg + ': No such file or directory')
      }
      if (state.fileSystem[filePath].type !== 'file') {
        return Promise.reject(arg + ': Is a directory')
      }
      return Promise.resolve(state.fileSystem[filePath].content)
    },

    readDir: function (path) {
      var dir = getPath(path)
      if (!state.fileSystem[dir]) {
        return Promise.reject('cannot access ' + path + ': No such file or directory')
      }
      var listing = Object.keys(state.fileSystem)
        .filter(function (path) {
          return path.startsWith(dir) && path !== dir
        })
        .map(function (path) {
          return path.substr(dir === '/' ? dir.length : dir.length + 1)
        })
        .filter(function (path) {
          return !path.includes('/')
        })
        .sort()
      return Promise.resolve(listing)
    },

    // getStats: function (path) {
    //   return Promise.resolve(state.fileSystem[path].meta)
    // },

    // createDir: function (path) {
      // TODO:
      // - `createDir(path) -> Promise`
      //   - `path` relative, non-existed path for new directory
      //   - Returns a Promise that resolves when directory is created
    // },

    // write: function (filePath, content) {
      // TODO:
      // - `write(filePath) -> Promise`
      //   - If file isn't empty, content is appended to it.
      //   - `filePath` path of file that should be written to. File doesn't have to exist.
      //   - Returns a Promise that resolves when writing is done
    // },

    remove: function (path) {
      if (!state.fileSystem[path]) {
        return Promise.reject('cannot remove ‘' + path + '’: No such file or directory')
      }
      Object.keys(state.fileSystem).forEach(function (key) {
        if (key.startsWith(path)) {
          delete state.fileSystem[key]
        }
      })
      return Promise.resolve()
    },

    getHistory: function () {
      return Promise.resolve(state.history)
    }
  }
  return emulator
}

function createState (initialState) {
  var state = defaultState()
  return merge(state, pick(Object.keys(state), initialState || {}))
}

function defaultState () {
  return {
    history: [],
    fileSystem: {
      '/': {
        type: 'dir',
        lastEdited: Date.now()
      },
      '/home': {
        type: 'dir',
        lastEdited: Date.now()
      },
      '/home/user': {
        type: 'dir',
        lastEdited: Date.now()
      }
    },
    user: 'user',
    workingDirectory: '/home/user'
  }
}

function joinPaths (a, b) {
  var path = (b.charAt(0) === '/' ? '' : a + '/') + b
  var parts = path.split('/').filter(function noEmpty (p) {
    return !!p
  })
  // Thanks to nodejs' path.join algorithm
  var up = 0
  for (var i = parts.length - 1; i >= 0; i--) {
    var part = parts[i]
    if (part === '.') {
      parts.splice(i, 1)
    } else if (part === '..') {
      parts.splice(i, 1)
      up++
    } else if (up) {
      parts.splice(i, 1)
      up--
    }
  }
  return '/' + parts.join('/')
}

module.exports = bashEmulator

},{"./commands":16,"ramda/src/merge":7,"ramda/src/pick":8}]},{},[12]);
